Aufgaben

1. FizzBuzz

Zähle von 1 bis 1000
Ist die Zahl ohne Rest durch 3 teilbar, so gebe 'Fizz' aus
Ist die Zahl ohne Rest durch 5 teilbar, so gebe 'Buzz' aus
Ist die Zahl ohne Rest durch 15 teilbar, so gebe 'FizzBuzz' aus
Sonst gebe die Zahl selbst aus


2. Gerade Fibonacci-Zahlen

Eine Fibonacci-Zahl erhalte ich, indem ich die beiden vorhergehenden Fibonacci-Zahlen addiere. Angefangen bei 1 und 2 sind die ersten zehn Fibonacci-Zahlen also: 1 2 3 5 8 13 21 34 55 89
Die Summe der geraden Fibonacci-Zahlen (bis fib(10)) ist also 2 + 8 + 34 = 44

Berechne die Fibonacci-Sequenz für alle Ergebnisse unter 4.000.000 und addiere die geraden Fibonacci-Zahlen.


3. Primfaktorzerlegung

Die Primfaktoren von 13195 sind 5, 7, 13 und 29.
Was ist der größte Primfaktor der Zahl 600851475143 ?

4. Eine Palindromzahl liest sich von vorn wie von hinten gleich. Die größte Palindromzahl, die das Produkt zweier zweistelliger Zahlen ist, ist 91 x 99 = 9009
   Was ist die größte Palindromzahl, die sich aus dem Produkt zweier dreistelliger Zahlen bilden lässt?


5. Die Zahl 2520 ist die kleinste Zahl, die sich durch alle Zahlen von 1 bis 10 ohne Rest teilen lässt. 
   Welches ist die kleinste positive Zahl, die sich durch alle Zahlen von 1 bis 20 ohne Rest teilen lässt?

6. Die ersten sechs Primzahlen lauten 2, 3, 5, 7, 11, 13. Die sechste Primzahl ist also die 13. Was ist die 10001. Primzahl?

7. Ein Landwirt züchtet drei Sorten Tiere: Hühner haben zwei Beine; Kühe und Schweine jeweils vier. Erstelle eine Funktion, die als Parameter die Anzahl der Hühner, der Schweine und der Rinder nimmt und daraus die Gesamtanzahl der Beine berechnet.
   Beispiel: beine(2, 3, 5) ergibt 36, beine(1, 2, 3) ergibt 22

8. Schreibe eine Funktion, die in einem beliebigen Text die Wörter zählt. Ein Wort geht dabei immer von einem Leerzeichen bis zum Nächsten.
   countWords("Das war doch einfach, oder?") => 5

9. Auf einem Schachfeld stehen nur zwei Türme. Schreibe eine Funktion, die die Positionen der Türme nimmt und berechnet, ob der erste den zweiten Turm schlagen kann.
   kannSchlagen("A8", "E8") => true, kannSchlagen("C3", "D4") => false

10. Du hast drei Programmierer angestellt und bezahlst sie (hoffentlich) auch. Schreibe eine Funktion, die drei Zahlen annimmt (die Stundenlöhne der drei Programmierer) und als Ergebnis den Unterschied zwischen dem best- und dem schlechtestbezahlten Programmierer ausgibt.
   programmierer(1, 5, 9) => 8, programmierer(33, 50, 93) => 60

11. Gegeben sei die folgende sehr große Zahl:

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Die vier aufeinanderfolgenden Stellen mit dem größten Produkt sind 9 x 9 x 8 x 9 = 5832.
Finde die 13 aufeinanderfolgenden Stellen mit dem größten Produkt und gib das Produkt zurück.

AUFLAGEN: - Implementiere zunächst eine Testmethode für das 'kleine' Beispiel mit N = 4. 
          - Zerlege jetzt das Problem in die Methoden, die Du brauchen wirst. WICHTIG! Hierbei nur den Namen, den Rückgabetyp und die Parameter anlegen! Der Body der Methode bleibt leer oder gibt -1 bzw. null zurück!
          - Jetzt schreibe einfache Tests für die Methode. Kurz und knackig, gerne auch viele Methoden
          - Jetzt gib Tests und Methodensignatur an Deinen Nachbarn. Er schreibt die Implementierung.

